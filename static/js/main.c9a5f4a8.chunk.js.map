{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["myConfig","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataSource","loaded","fetchCurrentWeather","_this2","REQUEST_URL","concat","fetch","then","response","json","responseData","setState","catch","error","console","log","react_default","a","createElement","className","renderWeatherIcon","main","temp","weather","weatherName","toLowerCase","dist","includes","renderCurrentWeather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAAaA,UACC,oCCuFCC,cAhFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,GACZC,QAAQ,GAJOT,mFASjBG,KAAKO,oEAGe,IAAAC,EAAAR,KACdS,EAAW,GAAAC,OAhBP,qDAgBO,mCAAAA,OAAgDhB,GAEjEiB,MAAMF,GACHG,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GACLP,EAAKQ,SAAS,CACZX,WAAYU,EACZT,QAAQ,MAGXW,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,SAAUF,oDAI1C,OAAKlB,KAAKI,MAAME,OAOde,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZxB,KAAKyB,oBACNJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZxB,KAAKI,MAAMC,WAAWqB,KAAKC,KAD9B,SAGAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZxB,KAAKI,MAAMC,WAAWuB,QAAQ,GAAGF,OAXpCL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iEAkBpB,IAAMK,EAAc7B,KAAKI,MAAMC,WAAWuB,QAAQ,GAAGF,KAAKI,cAC1D,MAAoB,UAAhBD,EACKR,EAAAC,EAAAC,cAACQ,EAAA,IAAD,MAEAF,EAAYG,SAAS,WACrBX,EAAAC,EAAAC,cAACQ,EAAA,aAAD,MAEAF,EAAYG,SAAS,QACrBX,EAAAC,EAAAC,cAACQ,EAAA,UAAD,MAEgB,WAAhBF,EACAR,EAAAC,EAAAC,cAACQ,EAAA,MAAD,MAEAF,EAAYG,SAAS,QACrBX,EAAAC,EAAAC,cAACQ,EAAA,UAAD,MAEAF,EAAYG,SAAS,WACrBX,EAAAC,EAAAC,cAACQ,EAAA,eAAD,WAGP,mCAKF,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZxB,KAAKiC,+BA3EIC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.c9a5f4a8.chunk.js","sourcesContent":["export const myConfig = {\n  weatherAPI: 'd278d85cfc813c61f01d9a0512c0391b'\n};\n","import React, { Component } from 'react';\nimport { Cloud, CloudDrizzle, CloudLightning, CloudRain, CloudSnow, Sun } from 'react-feather';\nimport './App.css';\nimport { myConfig } from './config';\n\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/weather?q=`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataSource: [],\n      loaded: false\n    }\n  }\n \n  componentDidMount() {\n    this.fetchCurrentWeather();\n  }\n\n  fetchCurrentWeather() {\n    const REQUEST_URL = `${ROOT_URL}Auckland,nz&units=metric&appid=${myConfig.weatherAPI}`;\n\n    fetch(REQUEST_URL)\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          dataSource: responseData,\n          loaded: true\n        });\n      })\n      .catch((error) => console.log('Error:', error));\n  }\n\n  renderCurrentWeather() {\n    if (!this.state.loaded) {\n      return (\n        <span className='loader is-size-2' />\n      );\n    }\n\n    return(\n      <div className='main-weather'>\n        {this.renderWeatherIcon()}\n        <div className='title is-2'>\n          {this.state.dataSource.main.temp}&deg;C\n        </div>\n        <div className='subtitle is-4'>\n          {this.state.dataSource.weather[0].main}\n        </div>\n      </div>\n    );\n  }\n\n  renderWeatherIcon() {\n    const weatherName = this.state.dataSource.weather[0].main.toLowerCase();\n    if (weatherName === 'clear') {\n      return <Sun />;\n    }\n    else if (weatherName.includes('drizzle')) {\n      return <CloudDrizzle />;\n    } \n    else if (weatherName.includes('rain')) {\n      return <CloudRain />;\n    }\n    else if (weatherName === 'clouds') {\n      return <Cloud />;\n    }\n    else if (weatherName.includes('snow')) {\n      return <CloudSnow />;\n    }\n    else if (weatherName.includes('thunder')) {\n      return <CloudLightning />;\n    }\n    else { \n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        {this.renderCurrentWeather()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}